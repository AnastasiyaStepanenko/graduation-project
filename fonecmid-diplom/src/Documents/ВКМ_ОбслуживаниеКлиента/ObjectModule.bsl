#Область ОбработчикиСобытий

//@skip-check module-accessibility-at-client
Процедура ОбработкаПроведения(Отказ,Режим)
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;	
	
	// регистр ВКМ_ВыполненныеСотрудникомРаботы
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ВКМ_НачалоДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_КонецДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|	И &Дата МЕЖДУ ДоговорыКонтрагентов.ВКМ_НачалоДействияДоговора И ДоговорыКонтрагентов.ВКМ_КонецДействияДоговора";
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Дата документа не соответствует периоду действия договора.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл	
		Если Выборка.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Вид договора с клиентом не является абонентским облуживанием";
			Сообщение.Сообщить();
			Отказ = Истина; 
		Иначе
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
			Движение.СуммаКОплате = Движение.КоличествоЧасов * Выборка.ВКМ_СтоимостьЧасаРаботы;
			
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Специалист;
			Движение.ЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
			//@skip-check undefined-variable
			//@skip-check bsl-legacy-check-dynamic-feature-access
			//@skip-check undefined-variable
			ПроцентПремии = ВКМ_ДанныеСотрудников.ПолучитьПроцентПремииСотрудника(Специалист);
			Если ПроцентПремии = Неопределено Тогда
				//@skip-check undefined-variable
				//@skip-check bsl-legacy-check-dynamic-feature-access
				ОбщегоНазначения.СообщитьПользователю("Не установлен процен премии для специалиста");
				Отказ = Истина;
			Иначе
				Движение.СуммаКОплате = Движение.ЧасовКОплате * Выборка.ВКМ_СтоимостьЧасаРаботы * ПроцентПремии / 100; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	

КонецПроцедуры

//@skip-check module-accessibility-at-client
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Не ДополнительныеСвойства.Свойство("КопияДокумента") Тогда
		СправочникОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Текст = СтрШаблон("Новая заявка №%1: Дата проведения работы %2; Клиент %3; Специалист %4; Проблема %5.",
		                  Номер, ДатаПроведенияРабот, Клиент, Специалист, ОписаниеПроблемы);
		СправочникОбъект.ТекстСообщения = Текст;
		СправочникОбъект.Записать(); 
	Иначе 
		СправочникОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Текст = СтрШаблон("Измененная заявка №%1: Новая дата проведения работы %2; Клиент %3; Новый специалист %4; Проблема %5.",
				           Номер, ДатаПроведенияРабот, Клиент, Специалист, ОписаниеПроблемы);
		СправочникОбъект.ТекстСообщения = Текст;
		СправочникОбъект.Записать(); 
	КонецЕсли;
	
КонецПроцедуры 

//@skip-check module-accessibility-at-client
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВКМ_ОбслуживаниеКлиента.Ссылка КАК Ссылка,
	               |	ВКМ_ОбслуживаниеКлиента.Номер КАК Номер,
	               |	ВКМ_ОбслуживаниеКлиента.Клиент КАК Клиент,
	               |	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист,
	               |	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
	               |	ВКМ_ОбслуживаниеКлиента.ОписаниеПроблемы КАК ОписаниеПроблемы,
	               |	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачалаРаботПлан,
	               |	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан КАК ВремяОкончанияРаботПлан
	               |ИЗ
	               |	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	               |ГДЕ
	               |	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка"; 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		КопияДокумента = Неопределено;
	Иначе
		КопияДокумента = Результат.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КопияДокумента", КопияДокумента);
	
КонецПроцедуры

#КонецОбласти